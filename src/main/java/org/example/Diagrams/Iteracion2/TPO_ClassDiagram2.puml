@startuml
'class Juego
TipoDeNave <-- Juego
Dificultades <-- Juego
TipoDeCuerpoCeleste <--  Juego
TipoDeCuerpoCeleste <-- Planeta
TipoDeCuerpoCeleste <--  SistemaEstelar

enum TipoDeNave{
     NAVE_AEGIS,
     NAVE_SWIFT,
     NAVE_PHANTOM,
     NAVE_TITAN,
}
enum Dificultades {
    FACIL
    MEDIO
    DIFICIL
}

enum TipoDeCuerpoCeleste {
    PLANETA_NEUTRAL,
    PLANETA_HOSTIL,
    PLANETA_ALIADO,
    SISTEMA_ESTELAR
}
Juego  --> TipoDeArma
Arma --> TipoDeArma
Mercado --> TipoDeArma
enum TipoDeArma{
   CAÑON_DE_IONES
   LASER_DE_FUSION
   MISIL_DE_ANTIMATERIA
   CAÑON_DE_PARTICULAS
   CAÑON_GAUSS
}
Juego "1" *-- "1" Jugador
class Juego {
    - {Static} Juego instanciaJuego
    - {Static} int turno = 0
    - boolean turnoExtra = true
    - MapaEstelar mapaEstelar
    - Jugador jugador
    - String mensajeRecibido

    - Juego()

    + {Static} Juego getInstancia(): Juego
    + void iniciarJuego(String nombreDelJugador, double uadeCoinsJugador, TipoDeNave naveJugador, int cantidadSistemasEstelares, Dificultades dificultad)

    + void indicarRumboANuevoSistema(String codigoDeSistema)

    + void comprarArma(TipoDeArma tipoDeArma)
    + void comprarCombustible(double cantidad)
    + void recargarEscudo(double cantidad)
    + void venderArma(TipoDeArma tipoDeArma)
    + void comprarEscudoMaximo(double cantidad)
    - Planeta irAlShopping(): Planeta

    + void realizarAccionDeReparacion()
    + void realizarAccionDeInformacion()
    + void atacarPlanetaHostil(String codigoDePlaneta)
    - void finDelJuego(String mensaje)

    - void pasarTurno()
    + MessageView messageToView(): MessageView
    + GameBeginView toViewgameBegin(): GameBeginView

    + Jugador getJugador(): Jugador
    + MapaEstelar getMapaEstelar(): MapaEstelar
}
Jugador "1" *-- "1" Nave
'class Jugador
class Jugador {
    - SistemaEstelar sistemaActual
    - Planeta planetaActual
    - String posicionEnElEspacio
    - NaveAliada nave
    - String nombre
    - double uadeCoins
    - boolean tesoro

    + Jugador(String nombre, double uadeCoins, NaveAliada nave, Planeta planetaInicial, SistemaEstelar sistemaEstelar)

    + String getNombre(): String
    + double getUadeCoins(): double
    + NaveAliada getNave(): NaveAliada
    + SistemaEstelar getSistemaActual(): SistemaEstelar
    + Planeta getPlanetaActual(): Planeta
    + String getPosicionEnElEspacio(): String
    + boolean mostrarTesoro(): boolean
    + boolean naveEstaDestruida(): boolean

    + void setPlanetaActual(Planeta planetaActual)
    + void setPosicionEnElEspacio(String posicionEnElEspacio)

    + void agregarUadeCoins(double uadeCoins)
    + void quitarUadeCoins(double uadeCoins)

    + void encontreElTesoro(boolean planetaTesoro)

    + boolean puedoComprar(double precio): boolean
    + boolean puedoViajar(Planeta planeta): boolean
    + boolean puedoVolverPlanetaNeutral(): boolean
    + boolean tengoUadeCoinsParaCombustible(): boolean

    + void viajeAPlaneta(Planeta planeta)
    + String comenzarViajeANuevoSistema(SistemaEstelar sistemaEstelar): String
    - double combustibleParaViajar(TipoDeCuerpoCeleste tipo): double

    + JugadorView toViewJugador(): JugadorView
}



'class Nave
abstract class Nave {
    - double vida
    - double velocidad
    - double vidaMaxima

    + Nave(double, double)

    + abstract poderAtaque() : double
    + agregarVida(double)
    + quitarVida(double)
    + getVida() : double
    + getVelocidad() : double
    + tengoVida() : boolean
    + getVidaMaxima() : double
    + setVida(double)
    + reestablecerVida()
}

NaveAliada --> TipoDeNave
abstract class NaveAliada extends Nave {
    - Escudo escudo
    - TanqueDeCombustible tanque
    - List<Arma> armas

    + NaveAliada(double, double, double, double)

    + recibirGolpe(double)
    + updateVida()
    + getEscudo() : Escudo
    + getTanque() : TanqueDeCombustible
    + agregarArma(Arma)
    + quitarArma(TipoDeArma) : boolean
    + tengoArmas() : boolean
    + limiteDeArmas() : boolean
    + tengoEsaArma(TipoDeArma) : boolean
    + elegirMiArma(TipoDeArma) : Arma
    + getArmas()
    + cantidadDeArmas() : double
    + abstract soyNaveTipo() : TipoDeNave
}

Arma *-- Mercado
NaveAliada *-- TanqueDeCombustible
NaveAliada *-- Escudo
NaveAliada *-- Arma

'class Arma
class Arma {
    + Arma(TipoDeArma, double, double)
    - double precio
    - double poderDeAtaque
    - TipoDeArma tipoDeArma
    + double getPoder() : double
    + double getPrecio() : double
    + TipoDeArma soyTipoDeArma() : TipoDeArma
}

class Escudo {
    - double escudoMax
    - double escudo

    + Escudo(double)

    + tengoEscudo() : boolean
    + agregarEscudoMaximo(double)
    + restablecerEscudo()
    + quitarEscudo(double)
    + agregarEscudo(double)
    + cantidadEscudoActual() : double
    + cantidadEscudoMax() : double
    + escudoAcero()
    + setEscudo(double)
    + escudoLleno() : boolean
}
class TanqueDeCombustible {
    - double combustible
    - double capacidadMaxTanque

    + TanqueDeCombustible(double)

    + cargarCombustible(double) : double
    + consumirCombustible(double)
    + tanqueLleno() : boolean
    + getCombustible() : double
    + combustibleNecesario(TipoDeCuerpoCeleste, double) : double
    + tengoCombustible() : boolean
    + tanqueVacio() : boolean
}
class NaveAegis extends NaveAliada {
    + NaveAegis()

    + poderAtaque() : double
    + soyNaveTipo() : TipoDeNave
}
class NavePhantom extends NaveAliada {
    + NavePhantom()

    + poderAtaque() : double
    + soyNaveTipo() : TipoDeNave
}
class NaveSwift extends NaveAliada {
    + NaveSwift()

    + poderAtaque(): double
    + soyNaveTipo(): TipoDeNave
}
class NaveTitan extends NaveAliada {
    + NaveTitan()

    + poderAtaque(): double
    + soyNaveTipo(): TipoDeNave
}

Hostil "1"*--"1" NavePirata

'class Enemigo
class NavePirata extends Nave {
    - poderDeAtaque: double
    + NavePirata()
    + poderAtaque(): double
}


'Mapa estelar
Juego "1" *-- "1" MapaEstelar
MapaEstelar "1" *-- "*" SistemaEstelar : sistemasEstelares
class MapaEstelar {
    - {static} MapaEstelar instanciaMapaEstelar
    - List<SistemaEstelar> sistemasEstelares
    - Dificultades dificultad
    - String sistemaConTesoro

    - MapaEstelar()
    + {static}  MapaEstelar getInstancia(): MapaEstelar

    + void crearMapaEstelar(Dificultades dificultad, int cantidadSistemasEstelares)
    - SistemaEstelar agregarSistemaEstelar(Dificultades dificultad, boolean tieneTesoro, boolean tieneCinturon): SistemaEstelar

    + String getSistemaConTesoro(): String
    + List<SistemaEstelar> getSistemasEstelares(): List<SistemaEstelar>
    + Dificultades getDificultad(): Dificultades

    + boolean verificarExistenciaDeSistemaEstelar(String codigoDeSistema): boolean
    + SistemaEstelar obtenerSistemaEstelar(String codigo): SistemaEstelar
}
'Sistema Estelar
SistemaEstelar"1" *-- "*"Planeta
SistemaEstelar"1" o--"1" CinturonAsteroide : tiene >
SistemaEstelar --> Dificultades : usa >


class SistemaEstelar {
    - String nombre
    - {static} int contador
    - List<Planeta> planetas
    - CinturonAsteroide cinturonAsteroides

    + SistemaEstelar(Dificultades dificultad, boolean tesoro, boolean cinturon):SistemaEstelar
    - void crearSistemaEstelar(Dificultades dificultad, boolean tieneTesoro, boolean tieneAsteroide):Void
    - void agregarPlaneta(Planeta planeta):Void

    + List<Planeta> getPlanetas():List
    + String mostrarNombre():String
    + CinturonAsteroide mostrarCinturonAsteroides():CinturonAsteroide

    + Planeta obtenerPlanetaNeutral():Planeta
    + Planeta obtenerPlanetaHostil(String codigoDePlaneta):Planeta
    + Planeta obtenerPlanetaAliado():Planeta

    + boolean tieneCinturonAsteroides():boolean

    + void mostrarListadoPlanetas():void
    + void quitarPlaneta(Planeta planeta):void

    + SistemasView toViewSistema(): SistemasView
}

class CinturonAsteroide {
    - int cantidadDeAsteroides

    + CinturonAsteroide(int cantidadDeAsteroides):CinturonAsteroide

    - double calcularPoder():double
    - double calcularRecompensa(double vidaInicial, double vidaFinal):double

    + String atravesar(Jugador jugador):String
}
'class Planeta
Neutral "1"*--"1" Mercado
abstract class Planeta {
    - String codigoDePlaneta

    + Planeta(String codigoDePlaneta)
    + String getCodigoDePlaneta()

    + abstract TipoDeCuerpoCeleste soyPlanetaTipo()
    + abstract Mercado ingresarAlMercado()
    + abstract void combate(Jugador jugador)
    + abstract void repararNaveAliada(Jugador jugador)
    + abstract String obtenerInformacion(Jugador jugador)
}


class Neutral extends Planeta {
    - {static} int count
    - Mercado mercado

    + Neutral()

    + TipoDeCuerpoCeleste soyPlanetaTipo() : TipoDeCuerpoCeleste
    + Mercado ingresarAlMercado() : Mercado

    + void combate(Jugador jugador)
    + void repararNaveAliada(Jugador jugador)

    + String obtenerInformacion(Jugador jugador)
}

class Aliado extends Planeta {
    - MapaEstelar mapaEstelar
    - {static} int count

    + Aliado()

    + TipoDeCuerpoCeleste soyPlanetaTipo() : TipoDeCuerpoCeleste
    + Mercado ingresarAlMercado() : Mercado
    + void combate(Jugador jugador)
    + void repararNaveAliada(Jugador jugador)
    + String obtenerInformacion(Jugador jugador)
}


class Mercado {
    - Arma arma

    +Mercado()

    + boolean accionDeComprarEscudoMaximo(Jugador jugador, double cantidadDeEscudoMaximo)
    + boolean accionDeRecargarEscudo(Jugador jugador, double cantidadDeEscudo)
    + boolean accionDeComprarCombustible(Jugador jugador, double cantidadDeCombustible)
    + boolean accionDeComprarArma(Jugador jugador, TipoDeArma tipoDeArma)
    + boolean accionDeVenderArma(Jugador jugador, TipoDeArma tipoDeArma)
}


'Subclase de Planeta: Hostil
class Hostil extends Planeta{
    - {static} int count
    - boolean tesoro
    - NavePirata naveEnemiga

    + Hostil(boolean tesoro, NavePirata naveEnemiga)

    + TipoDeCuerpoCeleste soyPlanetaTipo() : TipoDeCuerpoCeleste
    + Mercado ingresarAlMercado() : Mercado
    + void combate(Jugador jugador)
    + void repararNaveAliada(Jugador jugador)
    + String obtenerInformacion(Jugador jugador)
}
Juego *--> GameBeginView :Crea
class GameBeginView {
    - nombreDelJugador: String
    - uadeCoinsJugador: double
    - naveJugador: TipoDeNave
    - cantidadSistemasEstelares: int
    - dificultad: Dificultades
    - turno: int
    + GameBeginView(nombreDelJugador: String, uadeCoinsJugador: double, naveJugador: TipoDeNave, cantidadSistemasEstelares: int, dificultad: Dificultades, turno: int)
    + getNombreDelJugador(): String
    + getUadeCoinsJugador(): double
    + getNaveJugador(): TipoDeNave
    + getTurno(): int
    + getCantidadSistemasEstelares(): int
    + getDificultad(): Dificultades
    + setNombreDelJugador(nombreDelJugador: String): void
    + setUadeCoinsJugador(uadeCoinsJugador: double): void
    + setNaveJugador(naveJugador: TipoDeNave): void
    + setCantidadSistemasEstelares(cantidadSistemasEstelares: int): void
    + setDificultad(dificultad: Dificultades): void
}
Jugador *-->JugadorView:Crea
class JugadorView {
    - sistemaActual: SistemaEstelar
    - posicionEnElEspacio: String
    - nave: NaveAliada
    - nombre: String
    - uadeCoins: double
    - tesoro: boolean
    - planetaActual: Planeta

    + getSistemaActual(): SistemaEstelar
    + setSistemaActual(sistemaActual: SistemaEstelar): void
    + getPosicionEnElEspacio(): String
    + setPosicionEnElEspacio(posicionEnElEspacio: String): void
    + getNave(): NaveAliada
    + setNave(nave: NaveAliada): void
    + getNombre(): String
    + setNombre(nombre: String): void
    + getUadeCoins(): double
    + setUadeCoins(uadeCoins: double): void
    + isTesoro(): boolean
    + setTesoro(tesoro: boolean): void
    + getPlanetaActual(): Planeta
    + setPlanetaActual(planetaActual: Planeta): void
}

Juego *--> MessageView:Crea

class MessageView {
    - message: String

    + MessageView(message: String)
    + getMessage(): String
    + setMessage(message: String): void
}
SistemaEstelar *--> SistemasView: Crea
class SistemasView {
    - nombreSistemaEstelar: String
    - planetas: List<Planeta>
    - tieneCinturonDeAsteroides: boolean

    + SistemasView(nombreSistemaEstelar: String, planetas: List<Planeta>, tieneCinturonDeAsteroides: boolean)
    + getPlanetas(): List<Planeta>
    + getNombreSistemaEstelar(): String
    + isTieneCinturonDeAsteroides(): boolean
}
class Controller {
    + gameBegin(String nombreDelJugador, double uadeCoinsJugador, TipoDeNave naveJugador, int cantidadSistemasEstelares, Dificultades dificultad)
    + mostrarDetalleDelJugador()
    + mostrarTurno()
    + mostrarSistemas()
    + cambiarDeSistema(String codigoDeSistema)
    + comprarArma(TipoDeArma tipoDeArma)
    + venderArma(TipoDeArma tipoDeArma)
    + recargarEscudo(double cantidad)
    + comprarEscudoMaximo(double cantidad)
    + comprarCombustible(double cantidad)
    + repararNave()
    + localizarTesoro()
    + atacarPlanetaHostil(String codigoDePlaneta)
    + infoUpdate()
    - mostrarError(Exception e)
}

Controller --> Juego : usa >
Controller --> Jugador : usa >
Controller --> SistemaEstelar : usa >
Controller --> GameBeginView : usa >
Controller --> MessageView : usa >
Controller --> JugadorView : usa >
Controller --> SistemasView: usa >
@enduml
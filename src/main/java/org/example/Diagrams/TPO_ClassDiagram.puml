@startuml
'class Juego
TipoDeNave <-- Juego
Acciones <-- Juego
Dificultades <-- Juego
TipoDePlaneta <-- Juego
TipoDePlaneta <-- Planeta
Arma -- NaveAliada

Arma -- Mercado
enum TipoDeNave{
    AEGIS
    SWIFT
}
enum Acciones {
    COMPRAR_COMBUSTIBLE
    COMPRAR_ESCUDO
    COMPRAR_ARMA
    BUSCAR_TESORO
}

enum Dificultades {
    FACIL
    MEDIO
    DIFICIL
}

enum TipoDePlaneta {
    NEUTRAL
    HOSTIL
}
Arma --> TipoDeArma
enum TipoDeArma{
   CAÑON_DE_IONES
   LASER_DE_FUSION
   MISIL_DE_ANTIMATERIA
   CAÑON_DE_PARTICULAS
   CAÑON_GAUSS
}
Juego "1" *-- "n" Planeta
Juego "1" *-- "1" Jugador
class Juego {
    - planetas: List<Planeta>
    - turno: int
    - jugador: Jugador
    + Juego()
    + getInstancia(): Juego
    + iniciarJuego(nombreDelJugador: String, uadeCoinsJugador: double, naveJugador: TipoDeNave, tamanioDeLaGalaxia: int, dificultad: Dificultades): void
    + siguienteTurno(accion: Acciones, codigoPlaneta: String): void
    + mostarListadoPlanetas(tipoPlaneta: TipoDePlaneta): void
    - crearPlanetas(tamanioDeLaGalaxia: int, dificultad: Dificultades): void
    - finDelJuego(naveDestruida: boolean, tesoroEncontrado: boolean): void
    - visitarPlaneta(codigoPlaneta: String): Planeta
    - mostrarDatosDelJugador():void
}
Jugador "1" *-- "1" Nave
'class Jugador
class Jugador {
    - nave: NaveAliada
    - nombre: String
    - uadeCoins: double
    + Jugador(nombre: String, uadeCoins: double, nave: NaveAliada)
    + getUadeCoins(): double
    + setUadeCoins(uadeCoins: double): void
    + agregarUadeCoins(uadeCoins: double): void
    + quitarUadeCoins(uadeCoins: double): void
    + getNave(): NaveAliada
    + getNombre(): String
}



'class Nave
abstract class Nave {
  - vida: double
  - velocidad: double

  + Nave(velocidad: double, vida: double)
  + poderAtaque(): double
  + setVida(vida: double): void
  + getVida(): double
  + getVelocidad(): double
}

abstract class NaveAliada extends Nave{
  - combustible: double
  - arma: Arma
  - escudo: double
  - recompensa: double

  + NaveAliada(velocidad: double, vida: double, combustible: double, arma: Arma, escudo: double)
  + agregarEscudo(cantDeEscudo: double): void
  + cambiarArma(nuevaArma: Arma): void
  + getArma(): Arma
  + llenarTanqueDeCombustible(combustible: double): void
  + getCombustible(): double
  + setRecompensa(cantDeRecompenza: double): void
  + getRecompensa():double
}
' Clase para Nave Aegis
class NaveAegis extends NaveAliada{
  + NaveAegis()
  + poderAtaque():double
}
' Clase para Nave Swift
class NaveSwift extends NaveAliada{
  + NaveSwift()
  + poderAtaque():double
}


'class Arma
abstract class Arma {
    - precio: float
    - poderDeAtaque: float
    - tipoDeArma: TipoDeArma
    + Arma(tipoDeArma: TipoDeArma, precio: float, poderDeAtaque: float)
    + getPoder(): double
    + getPrecio(): double
    + getTipoDeArma():TipoDeArma
}

class MisilDeAntiMateria extends Arma{
  + MisilDeAntiMateria()
}
class LaserDeFusion extends Arma{
  + LaserDeFusion()
}
class CañonGauss extends Arma{
  + CañonGauss()
}
class CañonDeParticulas extends Arma{
  + CañonDeParticulas()
}
class CañonDeIones extends Arma{
  + CañonDeIones()
}

Hostil "1"*--"1" NavePirata

'class Enemigo
class NavePirata extends Nave {
  - poderDeAtaque: double
  + NavePirata()
  + poderAtaque():double
}



'class Planeta

Neutral "1"*--"1" Mercado
abstract class Planeta {
    - codigoDePlaneta: String
    + Planeta(codigoDePlaneta: String)
    + getCodigoDePlaneta(): String
    {abstract} + soyPlanetaTipo(): TipoDePlaneta
}


class Neutral extends Planeta {
    - count: int
    - mercado: Mercado
    + Neutral()
    + realizarAccionEnMercado(accion: Acciones, jugador: Jugador): void
    + soyPlanetaTipo(): TipoDePlaneta
}


class Mercado {
  + realizarAccionMercado(accion: AccionMercado, jugador: Jugador):void
}

Mercado *-- ComprarCombustibleAccion
Mercado *-- ComprarEscudoAccion
Mercado *-- ComprarArmaAccion
Mercado *-- VenderArmaAccion

interface AccionMercado {
  + realizarAccion(Jugador):void
}

class ComprarArmaAccion implements AccionMercado{
  + realizarAccion(Jugador): void
  - validarCoins(Arma, Jugador):void
}

class ComprarCombustibleAccion implements AccionMercado {
  + realizarAccion(Jugador):void
}

class ComprarEscudoAccion implements AccionMercado {
    +realizarAccion(Jugador jugador)
}

class VenderArmaAccion implements AccionMercado {
    +realizarAccion(Jugador jugador)
}


'Subclase de Planeta: Hostil
class Hostil extends Planeta{
    - count: int
    - tesoro: boolean
    - naveEnemiga: NavePirata
    + Hostil(tesoro: boolean, naveEnemiga: NavePirata)
    + isTesoro(): boolean
    + combate(naveAliada: NaveAliada): boolean
    + soyPlanetaTipo(): TipoDePlaneta
}



@enduml
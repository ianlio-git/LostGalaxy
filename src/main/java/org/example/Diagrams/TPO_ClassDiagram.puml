@startuml
'class Juego
TipoDeNave <-- Juego
Acciones <-- Juego
Dificultades <-- Juego
TipoDePlaneta <-- Juego
TipoDePlaneta <-- Planeta
enum TipoDeNave{
    AEGIS
    SWIFT
}
enum Acciones {
    COMPRAR_COMBUSTIBLE
    COMPRAR_ESCUDO
    COMPRAR_ARMA
    VENDER_ARMA
    BUSCAR_TESORO
}

enum Dificultades {
    FACIL
    MEDIO
    DIFICIL
}

enum TipoDePlaneta {
    NEUTRAL
    HOSTIL
}
Arma --> TipoDeArma
enum TipoDeArma{
   CAÑON_DE_IONES
   LASER_DE_FUSION
   MISIL_DE_ANTIMATERIA
   CAÑON_DE_PARTICULAS
   CAÑON_GAUSS
}
Juego "1" *-- "n" Planeta
Juego "1" *-- "1" Jugador
class Juego {
    - instanciaJuego: Juego
    - planetas: List<Planeta>
    - turno: int
    - jugador: Jugador

    + getInstancia(): Juego
    + iniciarJuego(nombreDelJugador: String, uadeCoinsJugador: double, naveJugador: TipoDeNave, tamanioDeLaGalaxia: int, dificultad: Dificultades): void
    + siguienteTurno(accion: Acciones, codigoPlaneta: String): void
    + mostarListadoPlanetas(tipoPlaneta: TipoDePlaneta): void
    - finDelJuego(naveDestruida: boolean, tesoroEncontrado: boolean): void
    - crearPlanetas(tamanioDeLaGalaxia: int, dificultad: Dificultades): void
    - visitarPlaneta(codigoPlaneta: String): Planeta
}
Jugador "1" *-- "1" Nave
'class Jugador
class Jugador {
    - nave: Nave
    - nombre: String
    - uadeCoins: double
    + Jugador(String, double, Nave)
    + getUadeCoins(): double
    + setUadeCoins(double): void
    + getNave(): Nave
}


'class Nave
abstract class Nave {
    - vida: double
    - velocidad: double
    + Nave()
    + poderAtaque(): double
    + setVida():double
    + getVida():double
}
abstract class NaveAliada extends Nave{
 - combustible: double
 - arma: Arma
 - escudo: double
 + setEscudo(double): void
 + getEscudo(): double
 + removeArma(): Arma
 + ponerArma(): Arma
 + setCombustible():double
 + getCombustible():double
 + {abstract} calcularDaño(): double
}
' Clase para Nave Aegis
class NaveAegis extends NaveAliada {
    +NaveAegis()
    +poderAtaque(): double
    +calcularDaño(): double
}
' Clase para Nave Swift
class NaveSwift extends NaveAliada {
    +NaveSwift()
    +poderAtaque(): double
    +calcularDaño(): double
}
NaveAliada "1"*--"n" Item
abstract class Item{
- precio: double

}
'class Arma
class Arma extends Item{
    - tipo : TipoDeArma
    - poder: double
    + Arma()
    + getPoder():double
}


Hostil "1"*--"1" NavePirata
'class Enemigo
class NavePirata extends Nave{
    +calcularRecompensa(): double
    +poderAtaque(): double
}


'class Planeta

Neutral "1"*--"1" Mercado
abstract class Planeta {
    - codigoDePlaneta: String
    + Planeta(String)
    + getCodigoDePlaneta(): String
    + abstract soyPlanetaTipo(): TipoDePlaneta
}

'class org.example.mercado.a.Mercado
class Neutral extends Planeta {
    - count: int
    - mercado: Mercado

    + Neutral()
    + soyPlanetaTipo(): TipoDePlaneta
    + realizarAccionEnMercado(accion: Acciones, jugador: Jugador): void
}

Mercado "1" o-- "n" Item
class Mercado {
    - comprarCombustibleAccion: AccionMercado
    - comprarEscudoAccion: AccionMercado
    - comprarArmaAccion: AccionMercado
    - venderArmaAccion: AccionMercado

    + realizarAccionMercado(accion: AccionMercado, jugador: Jugador): void
}
Mercado *-- ComprarCombustibleAccion
Mercado *-- ComprarEscudoAccion
Mercado *-- ComprarArmaAccion
Mercado *-- VenderArmaAccion
interface AccionMercado {
    {abstract} +realizarAccion(Jugador jugador)
}

class ComprarArmaAccion implements AccionMercado {
    +realizarAccion(Jugador jugador)
}

class ComprarCombustibleAccion implements AccionMercado {
    +realizarAccion(Jugador jugador)
}

class ComprarEscudoAccion implements AccionMercado {
    +realizarAccion(Jugador jugador)
}

class VenderArmaAccion implements AccionMercado {
    +realizarAccion(Jugador jugador)
}


'Subclase de Planeta: Hostil
class Hostil extends Planeta{
    - count: int
    - tesoro: boolean
    - naveEnemiga: NavePirata
    + Hostil(boolean, NavePirata)
    + isTesoro(): boolean
    + combate(Nave): boolean
    + soyPlanetaTipo(): TipoDePlaneta
}


@enduml